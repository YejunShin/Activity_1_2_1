#-----import statements-----
import turtle as trtl
import random
import leaderboard as lb
#-----game configuration----
# leaderboard variables
leaderboard_file_name = "a122_leaderboard.txt"
leader_names_list = []
leader_scores_list = []
player_name = input ("Please enter your name:")
t=trtl.Turtle()
score_writer=trtl.Turtle()
t.speed(0)
spot_color = "pink"
score=0
font_setup=("Arial", 20, "normal")
timer = 5
counter_interval = 1000
timer_up = False
score_writer.speed(0)
#-----initialize turtle-----
t.shape("circle")
t.shapesize(2)
t.fillcolor("black")
score_writer.penup()
score_writer.goto(-380,290)
colors=["purple","blue","green","yellow"]
counter =  trtl.Turtle()
#-----game functions--------
def manage_leaderboard():
  
  global leader_scores_list
  global leader_names_list
  global score
  global t

  # load all the leaderboard records into the lists
  lb.load_leaderboard(leaderboard_file_name, leader_names_list, leader_scores_list)
  # TODO
  if (len(leader_scores_list) < 5 or score > leader_scores_list[4]):
    lb.update_leaderboard(leaderboard_file_name, leader_names_list, leader_scores_list, player_name, score)
    lb.draw_leaderboard(leader_names_list, leader_scores_list, True, t, score)

  else:
    lb.draw_leaderboard(leader_names_list, leader_scores_list, False, t, score)
def change_size():
	size=[1,2,3,4]
	t.turtlesize(random.choice(size))
def change_color():
	t.color(random.choice(colors))
	t.stamp()
	t.color("black")
def change_position():
		t.penup()
		xpos=random.randint(-400,400)
		ypos=random.randint(-300,300)
		t.goto(xpos,ypos)
counter.penup()
counter.goto(-380,250)
def countdown():
	global timer, timer_up
	counter.clear()
	if timer <= 0:
		counter.write("Time's Up", font=font_setup)
		timer_up = True
		manage_leaderboard()
	else:
		counter.write("Timer: " + str(timer), font=font_setup)
		timer -= 1
		counter.getscreen().ontimer(countdown, counter_interval) 
def update_score():
	global score
	score+=1
	score_writer.clear()
	score_writer.write(score, font=font_setup)
def spot_clicked(x,y):
	global timer
	if timer_up==False:
		change_color()
		change_size()
		change_position()
		update_score()
#-----events----------------
t.onclick(spot_clicked)
wn = trtl.Screen()
wn.bgcolor("red")
wn.ontimer(countdown, counter_interval)
wn.mainloop()



#   leaderboard.py
# The leaderboard module to be used in a122 solution.

# set the levels of scoring
bronze_score = 15
silver_score = 20
gold_score = 25

# load leaderboard from file
def load_leaderboard(file_name, leader_names, leader_scores):
	leaderboard_file = open(file_name, "r")  # need to create the file ahead of time in same folder

  # use a for loop to iterate through the content of the file, one line at a time
  # note that each line in the file has the format "leader_name,leader_score" for example "Pat,50"
	for line in leaderboard_file:
		leader_name = ""
		leader_score = ""    
		index = 0

    # TODO 1: use a while loop to read the leader name from the line (format is "leader_name,leader_score")
		while (line[index] != ","):
			leader_name = leader_name + line[index]
			index = index + 1
    # TODO 2: add the leader name to the list
		leader_names.append(leader_name)
    
    # TODO 3: read the player score using a similar loop
		while (line[index] != "\n"):
			leader_score = leader_score + line[index]
			index = index + 1
    # TODO 4: add the player score to the list
			int(leader_scores.append(leader_score))
	leaderboard_file.close()


# update leaderboard by inserting the current player and score to the list at the correct position
def update_leaderboard(file_name, leader_names, leader_scores, player_name, player_score):

  leader_index = 0
  # TODO 5: loop through all the scores in the existing leaderboard list
  '''
    while ():
    # TODO 6: check if this is the position to insert new score at
    if ():
      break
    else:
      leader_index = leader_index + 1
  '''
  # TODO 7: insert the new player and score at the appropriate position


  # TODO 8: keep both lists at 5 elements only (top 5 players)

  
  # store the latest leaderboard back in the file
  leaderboard_file = open(file_name, "w")  # this mode opens the file and erases its contents for a fresh start
  leader_index = 0
  # TODO 9: loop through all the leaderboard elements and write them to the file
  '''
    while ():
    leaderboard_file.write(leader_names[leader_index] + "," + str(leader_scores[leader_index]) + "\n")
    leader_index = leader_index + 1
  '''
  leaderboard_file.close()
  

# draw leaderboard and display a message to player
def draw_leaderboard(leader_names, leader_scores, high_scorer, turtle_object, player_score):
  
  # clear the screen and move turtle object to (-200, 100) to start drawing the leaderboard
  font_setup = ("Arial", 20, "normal")
  turtle_object.clear()
  turtle_object.penup()
  turtle_object.goto(-200,100)
  turtle_object.hideturtle()
  turtle_object.down()
  leader_index = 0

  # loop through the lists and use the same index to display the corresponding name and score, separated by a tab space '\t'
  while leader_index < len(leader_names):
    turtle_object.write(str(leader_index + 1) + "\t" + leader_names[leader_index] + "\t" + str(leader_scores[leader_index]), font=font_setup)
    turtle_object.penup()
    turtle_object.goto(-200,int(turtle_object.ycor())-50)
    turtle_object.down()
    leader_index = leader_index + 1

  # Display message about player making/not making leaderboard based on high_scorer
  if (high_scorer):
    turtle_object.write("Congratulations! You made the leaderboard!", font=font_setup)
  else:
    turtle_object.write("Sorry, you didn't make the leaderboard. Maybe next time!", font=font_setup)

  # move turtle to a new line
  turtle_object.penup()
  turtle_object.goto(-200,int(turtle_object.ycor())-50)
  turtle_object.pendown()
  
  # TODO 10: Display a gold/silver/bronze message if player earned a gold/silver/or bronze medal; display nothing if no medal
  '''
  if ():
    turtle_object.write("You earned a bronze medal!", font=font_setup)
    turtle_object.write("You earned a silver medal!", font=font_setup)
    turtle_object.write("You earned a gold medal!", font=font_setup)
  '''
